#!/bin/bash
# uki-script - Create unified kernel images in Arch
# v1.0.0
#
# Written in 2020 by Tamvana Makuluni <sw@makuluni.com>
#
# To the extent possible under law, the author has dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>

get_ctime() {
    ctime=0
    files=
    for file in $1; do
        if [ -e "$file" ]; then
            files="$files ${file@Q}"
            file_time=`stat --printf %Y "$file" 2>/dev/null || printf "0"`
            [ $file_time -gt $ctime ] && ctime="$file_time"
        fi
    done
    [ $# -gt 1 ] && eval $2=$ctime
    [ $# -gt 2 ] && eval $3=\$files
}
backup() {
    let backup=$backups
    ext="${1##*.}"
    base="${1%%.$ext}"
    while [ 0 -lt $backup ]; do
        let backup-=1
        backup_file="$base-fallback${backup##0}.$ext"
        if [ $backup -eq 0 ]; then
            from_file="$1"
        else
            let from=$backup-1
            from_file="$base-fallback${from##0}.$ext"
        fi
        if [ -e "$from_file" ]; then
            cp "$from_file" "$backup_file" || exit 1
        fi
    done
}

process_conf() {
    unified=
    kernel_name="${1%%.conf}"
    kernel_name="${kernel_name##*/}"
    build_backups=0
    install_backups=1
    ucode=/boot/*-ucode.img
    ucode_initramfs=
    cmdline="$(cat /proc/cmdline)"
    splash="/usr/share/systemd/bootctl/splash-arch.bmp"
    install=
    sign_key=
    sign_cert=
    efistub="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
    echo "Building unified kernel image for kernel $kernel_name."
    if [ -e "$conf" ]; then
        while read -r line; do
            case "${line%%:*}" in
                \#*)
                    ;;
                kernel)
                    kernel_name="$(printf '%s' "${line:7}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                ucode)
                    ucode="$(printf '%s' "${line:6}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                splash)
                    splash="$(printf '%s' "${line:7}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                efistub)
                    efistub="$(printf '%s' "${line:8}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                command_line)
                    cmdline="${line:13}"
                    ;;
                build)
                    unified="$(printf '%s' "${line:6}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                install)
                    install="$(printf '%s' "${line:8}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                build_backups)
                    let backups="${line##*:}" || { echo "invalid config line: $line" && exit 1; }
                    ;;
                install_backups)
                    let install_backups="${line##*:}" || { echo "invalid config line: $line" && exit 1; }
                    ;;
                sign_key)
                    sign_key="$(printf '%s' "${line:9}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                sign_cert)
                    sign_cert="$(printf '%s' "${line:10}" | sed 's/^\s\+\|\s\+$//')"
                    ;;
                *)
                    echo "    Unknown option ${line%%:*}!" >&2
                    exit 1
                    ;;
            esac
        done <"$conf"
    fi
    initramfs="/boot/initramfs-$kernel_name.img"
    kernel="/boot/vmlinuz-$kernel_name"
    if [ "x$unified" == "x" ]; then
        unified="/boot/unified-image-$kernel_name.efi"
    elif [ -d "$unified" ]; then
        unified="$unified/unified-image-$kernel_name.efi"
    fi
    if [ -e "$initramfs" ] && [ -e "$kernel" ]; then
        get_ctime "$initramfs" initramfs_ctime
        get_ctime "$ucode" ucode_ctime ucode
        if [ $ucode_ctime -gt 0 ]; then
            ucode_initramfs="${initramfs%%.img}-withucode.img"
            get_ctime "$ucode_initramfs"
            if [ $ctime -lt $initramfs_ctime ] || [ $ctime -lt $ucode_ctime ]; then
                eval "cat $ucode ${initramfs@Q} > ${ucode_initramfs@Q}"
            fi
            initramfs="$ucode_initramfs"
        fi
        get_ctime "/usr/lib/os-release" osrel_ctime
        get_ctime "$conf" conf_ctime
        get_ctime "$splash" splash_ctime 
        get_ctime "$kernel" kernel_ctime
        get_ctime "$initramfs" initramfs_ctime
        get_ctime "$efistub" efistub_ctime
        get_ctime "$unified"
        if $FORCE \
            || [ $ctime -lt $osrel_ctime ] \
            || [ $ctime -lt $conf_ctime ] \
            || [ $ctime -lt $splash_ctime ] \
            || [ $ctime -lt $kernel_ctime ] \
            || [ $ctime -lt $initramfs_ctime ] \
            || [ $ctime -lt $efistub_ctime ] \
        ; then
            tmpfile="$(mktemp /tmp/uki-script.XXXXXX)"
            backups=$build_backups
            echo "$cmdline" > $tmpfile
            backup "$unified"
            if [ -e "$splash" ]; then
                objcopy \
                        --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
                        --add-section .cmdline="$tmpfile" --change-section-vma .cmdline=0x30000 \
                        --add-section .splash="$splash" --change-section-vma .splash=0x40000 \
                        --add-section .linux="$kernel" --change-section-vma .linux=0x2000000 \
                        --add-section .initrd="$initramfs" --change-section-vma .initrd=0x3000000 \
                        "$efistub" "$unified" || exit 1
            else
                objcopy \
                        --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
                        --add-section .cmdline="$tmpfile" --change-section-vma .cmdline=0x30000 \
                        --add-section .linux="$kernel" --change-section-vma .linux=0x2000000 \
                        --add-section .initrd="$initramfs" --change-section-vma .initrd=0x3000000 \
                        "$efistub" "$unified" || exit 1
            fi
            rm $tmpfile
            if [ "x$sign_key" != "x" ] && [ "x$sign_cert" != "x" ]; then
                sbsign --key "$sign_key" --cert "$sign_cert" --output "$unified" "$unified" || exit 1
            fi
            if [ -e "$unified" ] && [ -d "$install" ]; then
                backups=$install_backups
                backup "$install/$kernel_name.efi"
                cp "$unified" "$install/$kernel_name.efi" || exit 1
            fi
            echo "    Done."
        else
            echo "    Image $kernel_name is up to date."
        fi
    fi
}

eval "set -- $(getopt --options f --longoptions force -- "$@")"

FORCE=false
CONTINUE=true
while $CONTINUE; do
    case $1 in
        -f)
            FORCE=true
            ;;
        --force)
            FORCE=true
            ;;
        --)
            CONTINUE=false
            ;;
    esac
    shift
done

if [ "$#" -gt 0 ]; then
    for conf in "$@"; do
        if [ -f "$conf" ]; then
            process_conf "$conf"
        elif [ -f "/etc/uki-script/$conf.conf" ]; then 
            process_conf "/etc/uki-script/$conf.conf"
        else
            echo "Could not find configuration ${conf@Q}" >&2
    	exit 1
        fi
    done
else
    for conf in /etc/uki-script/*.conf; do
	process_conf "$conf"
    done
fi

exit 0
